\ Some examples of recursive RPN words

\ rfib is purely stack-based
: rfib
  doc:"Return Nth Fibonacci number  ( n -- fib )

DEFINITION:
fib(n) = fib(n-1) + fib(n-2)"
  dup 1 > if
      dup  1 -  recurse
      swap 2 -  recurse
      +
  then
;

\ This slightly different version uses a named input parameter
: fib2
  | in:n |
  @n 2 < if
    @n
  else
    @n 2 - recurse  @n 1 - recurse  +
  then
;


\ rfact uses an inout: local variable
: rfact
  doc:"Factorial  ( x -- x! )

DEFINITION:
x! = x * (x-1) * (x-2) ... * 2 * 1"
  | inout:x |
  @x 0 > if
      @x dup 1 -  recurse  *  !x
  else
      1 !x
  then
;


\ Don't call this with arguments greater than 2 (maybe 3)
: ack
  doc:"Ackermann's function  ( y x -- ack )
Neither argument may be negative.

DEFINITION:
            { y+1                       if x==0
ack(x, y) = { ack(x-1, 1)               if y==0
            { ack(x-1, ack(x, y-1))     otherwise

WARNING:
ack is implemented using a recursive definition which will consume
inordinate amounts of space and time even on modest arguments."

  | in:x in:y |
  \ ."ack( " @x . .", " @y . .")" cr    \ If you want to monitor progress

  @x 0= if
      @y 1 +                    \ y+1
  else
      @y 0= if
          1 @x 1 - recurse      \ ack(x-1, 1)
      else
          @y 1 - @x recurse     \ ack(x-1, ack(x, y-1))
          @x 1 -
          recurse
      then
  then
;
