\ : BEGIN_SECONDARY_WORDS----------------------------- doc:" " ;

\ Secondary words are protected by default and must have doc strings
\ N.B. 'F_SHOW_X cf' means "Do not print X automatically"


\ #############################################################################
\ #
\ #     C O N S T A N T S
\ #
\ #############################################################################
: TRUE          doc:"TRUE  ( -- 1 )
Constant: Logical true"
  1     F_SHOW_X cf ;

: FALSE         doc:"FALSE  ( -- 0 )
Constant: Logical false"
  0     F_SHOW_X cf ;

: i             doc:"i  ( -- i )  Imaginary unit (0,1)

DEFINITION:
i = sqrt(-1)

Do not confuse this with the I command,
which returns the index of a DO loop."
  (0,1) F_SHOW_X cf ;

: PHI           doc:"PHI  ( -- 1.618... )   Golden ratio

DEFINITION:
PHI = (1 + sqrt(5)) / 2"
  5 sqrt 1 + 2 / ;

: BL            doc:"BL  ( -- 32 )   ASCII code for a space character"
  32    F_SHOW_X cf ;


\ #############################################################################
\ #
\ #     I  /  O   F U N C T I O N S
\ #
\ #############################################################################
: ?cr           doc:"?cr  Print a newline only if necessary to return to left margin"
  @#OUT 0 > if  cr  then ;

: prompt        doc:"prompt  ( -- n ) [ text -- ]  Prompt for numeric input"
  $depth 1 < if "(1 required)" X_INSUFF_STR_PARAMS $throw
  else $. #in  then ;

: space         doc:"space   Display one space character"
  BL emit ;

: spaces        doc:"spaces  ( n -- )   Display N space characters"
  | in:n |
  @n 0 do space loop ;


\ #############################################################################
\ #
\ #     S T A C K   F U N C T I O N S
\ #
\ #############################################################################
: -rot          doc:"-rot  ( z y x -- x z y )  Rotate back
Rotate top stack element back to third spot, pulling others down.
Equivalent to ROT ROT"
  depth 3 < if "(3 required)" X_INSUFF_PARAMS $throw
  else  rot rot  then
  F_SHOW_X cf ;

: nip           doc:"nip  ( y x -- x )
Drop second stack element
Equivalent to SWAP DROP.  J.V. Noble calls this PLUCK."
  depth 2 < if  "(2 required)" X_INSUFF_PARAMS $throw
  else  swap drop then
  F_SHOW_X cf ;

: tuck          doc:"tuck  ( y x -- x y x )
Duplicate top stack element into third position
Equivalent to SWAP OVER.  J.V. Noble calls this UNDER."
  depth 2 < if "(2 required)" X_INSUFF_PARAMS $throw
  else  swap over then
  F_SHOW_X cf ;


\ #############################################################################
\ #
\ #     M O D E S  &  M I S C   F U N C T I O N S
\ #
\ #############################################################################
: debug         doc:"debug  ( -- )  Toggle debugging state"
  F_DEBUG_ENABLED dup tf  fs? if ."Debugging is now ENABLED"
  else              ."Debugging is now disabled"
  cr then ;

: debug?        doc:"debug?  ( -- flag )  Test if debugging is enabled"
  F_DEBUG_ENABLED fs? ;

: deg?          doc:"deg?  ( -- flag )  Test if angular mode is degrees"
  F_GRAD fc?  F_RAD fc?  and ;

: rad?          doc:"rad?  ( -- flag )  Test if angular mode is radians"
  F_GRAD fc?  F_RAD fs?  and ;

: grad?         doc:"grad?  ( -- flag )  Test if angular mode is gradians"
  F_GRAD fs?  F_RAD fc?  and ;

: mod           doc:"mod  ( y x -- remainder )  Remainder"
  | in:y in:x |
  @x 0 = if  "X cannot be zero" X_FP_DIVISION_BY_ZERO $throw then
  @y @x /mod  drop ;


\ #############################################################################
\ #
\ #     C O N V E R S I O N   F U N C T I O N S
\ #
\ #############################################################################
: mm->in doc:"mm->in  ( mm -- inch )  Convert millimeters to inches"
  25.4 / ;

: m->ft  doc:"m->ft  ( m -- ft )  Convert meters to feet"
  1000 * mm->in   12 / ;

: km->mi doc:"km->mi  ( km -- mile )  Convert kilometers to miles"
  1000 *  m->ft 5280 / ;

: in->mm doc:"in->mm  ( inch -- mm )  Convert inches to millimeters"
  25.4 * ;

: ft->m doc:"ft->m  ( ft -- m )  Convert feet to meters"
  12   * in->mm 1000 / ;

: mi->km doc:"mi->km  ( mile -- km )  Convert miles to kilometers"
  5280   * ft->m  1000 / ;

: f->c doc:"f->c  ( f -- c )  Convert degrees fahrenheit to degrees celcius"
  32 - 5 * 9 / ;

: c->f doc:"c->f  ( c -- f )  Convert degrees celcius to degrees fahrenheit"
  9 * 5 / 32 + ;

: g->oz doc:"g->oz  ( g -- oz )  Convert grams to ounces"
  28.349523 / ;

: gal->l  doc:"gal->l  ( gal -- liter )  Convert gallons to liters"
  3.7854118 * ;

: l->gal  doc:"l->gal  ( liter -- gal )  Convert liters to gallons"
  3.7854118 / ;

: kg->lb doc:"kg->lb  ( kg -- lb )  Convert kilograms to pounds"
  0.45359237 / ;

\ : cm3->in3 doc:"cm3->in3  ( cm^3 -- in^3 )  Convert cubic centimeters to cubic inches"
\   16.3871     / ;

: oz->g    doc:"oz->g  ( oz -- g )  Convert ounces to grams"
  28.349523 * ;

: lb->kg   doc:"lb->kg  ( lb -- kg )  Convert pounds to kilograms"
  0.45359237 * ;

\ : in3->cm3  doc:"in3->cm3  ( in^3 -- cm^3 )  Convert cubic inches to cubic centimeters"
\   16.3871     * ;


\ #############################################################################
\ #
\ #     S T R I N G   F U N C T I O N S
\ #
\ #############################################################################
: anum          doc:"anum  ( x -- )  [ s -- s' ]  Append numeric x to top string"
  | in:x |
  $depth 0 = if "" then
  @x #->$ $cat ;

: $date         doc:"$date  [ -- date ]  Current date as string"
  date d->jd jd->$ ;

: adate         doc:"adate  Append current date to top string stack element"
  $depth 0 = if "" then
  $date $cat  ;

: atime         doc:"atime  Append current time to top string stack element"
  $depth 0 = if "" then
  $time $cat  ;


\ : END_SECONDARY_WORDS----------------------------- doc:" " ;
