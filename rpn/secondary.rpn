\ : BEGIN_SECONDARY_WORDS----------------------------- doc:" " ;

\ Secondary words are protected by default and must have doc strings.
\ N.B. 'F_SHOW_X cf' means "Do not print X automatically"


\ #############################################################################
\ #
\ #     C O N S T A N T S
\ #
\ #############################################################################
: TRUE          doc:"TRUE   ( -- 1 )
Logical true."
  1     F_SHOW_X cf ;

: FALSE         doc:"FALSE   ( -- 0 )
Logical false."
  0     F_SHOW_X cf ;

: i             doc:"i   ( -- i )
Imaginary unit (0,1).

DEFINITION:
i = sqrt(-1)

Do not confuse this with the I command,
which returns the index of a DO loop."
  (0,1) F_SHOW_X cf ;

: PHI           doc:"PHI   ( -- 1.618... )
Golden ratio.

DEFINITION:
PHI = (1 + sqrt(5)) / 2"
  5 sqrt 1 + 2 / ;

: RHO           doc:"RHO   ( -- 1.3247... )
Plastic number.  See https://en.wikipedia.org/wiki/Plastic_number

DEFINITION:
The unique real solution to x^3 = x + 1."
  | sqrt69 |
  69 sqrt !sqrt69

  9 @sqrt69 + 18 /  cbrt
  9 @sqrt69 - 18 /  cbrt
  +
  ;

: BL            doc:"BL   ( -- 32 )
ASCII code for a space character."
  32    F_SHOW_X cf ;


\ #############################################################################
\ #
\ #     S T A C K   F U N C T I O N S
\ #
\ #############################################################################
: dup           doc:"dup   ( x -- x x )
Duplicate top stack element.  Equivalent to 1 pick.

See also: ?dup"
  depth 1 < if  "(1 required)" X_INSUFF_PARAMS $throw then
  1 pick
  F_SHOW_X cf ;

: over          doc:"over   ( y x -- y x y )
Duplicate second stack element.  Equivalent to 2 pick."
  depth 2 < if  "(2 required)" X_INSUFF_PARAMS $throw then
  2 pick
  F_SHOW_X cf ;

: swap          doc:"swap   ( y x -- x y )
Exchange top two stack elements.  Equivalent to 2 roll."
  depth 2 < if  "(2 required)" X_INSUFF_PARAMS $throw then
  2 roll
  F_SHOW_X cf ;

: rot           doc:"rot   ( z y x -- y x z )
Rotate third stack element to the top, rolling others up.
Equivalent to 3 roll.

See also: -rot"
  depth 3 < if  "(3 required)" X_INSUFF_PARAMS $throw then
  3 roll
  F_SHOW_X cf ;

: -rot          doc:"-rot   ( z y x -- x z y )
Rotate back.  Rotate top stack element back to third spot, pulling others down.
Equivalent to rot rot."
  depth 3 < if  "(3 required)" X_INSUFF_PARAMS $throw then
  rot rot
  F_SHOW_X cf ;

: nip           doc:"nip   ( y x -- x )
Drop second stack element.  Equivalent to swap drop.
J.V. Noble calls this PLUCK."
  depth 2 < if  "(2 required)" X_INSUFF_PARAMS $throw then
  swap drop
  F_SHOW_X cf ;

: tuck          doc:"tuck   ( y x -- x y x )
Duplicate top stack element into third position.  Equivalent to swap over.
J.V. Noble calls this UNDER."
  depth 2 < if  "(2 required)" X_INSUFF_PARAMS $throw then
  swap over
  F_SHOW_X cf ;


\ #############################################################################
\ #
\ #     D E B U G G I N G
\ #
\ #############################################################################
: debug         doc:"debug   ( -- )
Toggle debugging state."
  F_DEBUG_ENABLED dup tf
  fs? if ."Debugging enabled"
  else   ."Debugging disabled" then
  cr ;

: debug?        doc:"debug?   ( -- bool )
Test if debugging is enabled."
  F_DEBUG_ENABLED fs? ;

: dbg.token     doc:"dbg.token   ( -- )
Enable token debugging."
  "token" 3 >debug
  ."Token debugging enabled" cr
  F_DEBUG_ENABLED sf
;               hide dbg.token

: trace         doc:"trace   ( -- )
Toggle tracing state."
  \ If we're not debugging at all, or trace level is 0, enable trace debugging
  debug? not  "trace" debug> 0 =   or if
    "trace" 1 >debug
    ."Tracing enabled" cr
    F_DEBUG_ENABLED sf
  else
    "trace" 0 >debug
    ."Tracing disabled" cr
  then
;


\ #############################################################################
\ #
\ #     I  /  O   F U N C T I O N S
\ #
\ #############################################################################
: ?cr           doc:"?cr   ( -- )
Print a newline only if necessary to return to left margin."
  @#OUT 0 > if  cr  then ;

: prompt        doc:"prompt   ( -- n ) [ text -- ]
Prompt for numeric input."
  $depth 0 = if "(1 required)" X_INSUFF_STR_PARAMS $throw then
  $. #in ;

: space         doc:"space   ( -- )
Display one space character."
  BL emit ;

: spaces        doc:"spaces   ( n -- )
Display N space characters."
  | in:n |
  "" @n 0 do " " $cat loop
  $.  ;


\ #############################################################################
\ #
\ #     M O D E S   &   M I S C   F U N C T I O N S
\ #
\ #############################################################################
: beg           doc:"beg   ( -- )
Set 'Begin' (annuity due) financial mode.  Do not confuse this with the
begin command, which starts a loop."
  F_TVM_BEGIN_MODE sf ;

: deg?          doc:"deg?   ( -- bool )
Test if angular mode is degrees."
  F_GRAD fc?  F_RAD fc?  and ;

: end           doc:"end   ( -- )
Set 'End' (ordinary annuity) financial mode."
  F_TVM_BEGIN_MODE cf ;

: grad?         doc:"grad?   ( -- bool )
Test if angular mode is gradians."
  F_GRAD fs?  F_RAD fc?  and ;

: rad?          doc:"rad?   ( -- bool )
Test if angular mode is radians."
  F_GRAD fc?  F_RAD fs?  and ;

: size?         doc:"size?   ( -- size )
Return register size."
  @SIZE  ;

: mod           doc:"mod   ( y x -- remainder )
Remainder."
  | in:y in:x |
  @x 0 = if  @y @x "X cannot be zero" X_FP_DIVISION_BY_ZERO $throw then
  @y @x /mod  drop ;

: iplot         doc:"iplot   ( -- ) [ FN -- ]
Interactively call PLOT.  Repeat with different xlow,xhigh
until xlow==xhigh.

See also: plot"
  | xlow xhigh |

  begin
    "Enter X lower value: " prompt !xlow
    "Enter X upper value: " prompt !xhigh
    @xlow @xhigh - 0 = if  leave then
    @xlow @xhigh $dup plot
  again
  $drop
  ;

: ushow         doc:"ushow   ( x_uexpr -- x_uexpr )
Show unit expression."
  | in:x |
  @x unit? not if @x "Not a unit" X_INVALID_ARG $throw then
  @x unit> $ushow  ;


\ #############################################################################
\ #
\ #     C O N V E R S I O N   F U N C T I O N S
\ #
\ #############################################################################
: f->c doc:"f->c   ( f -- c )
Convert degrees fahrenheit to degrees celsius."
  | in:f |
  @f 32 - 5 * 9 / ;

: c->f doc:"c->f   ( c -- f )
Convert degrees celsius to degrees fahrenheit."
  | in:c |
  @c 9 * 5 / 32 + ;


\ #############################################################################
\ #
\ #     S T R I N G   F U N C T I O N S
\ #
\ #############################################################################
: anum          doc:"anum   ( x -- )  [ s -- s' ]
Append numeric x to top string."
  | in:x |
  $depth 0 = if "" then
  @x #->$ $cat ;

: $date         doc:"$date  [ -- date ]
Current date as string."
  date d->jd jd->$ ;

: adate         doc:"adate   [ -- s ]
Append current date to top string stack element."
  $depth 0 = if "" then
  $date $cat  ;

: atime         doc:"atime   [ -- s ]
Append current time to top string stack element."
  $depth 0 = if "" then
  $time $cat  ;


\ : END_SECONDARY_WORDS----------------------------- doc:" " ;
