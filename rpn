#!/usr/bin/env python3

import cmath
import inspect
import math
import numpy    as np
import os
import ply.yacc as yacc
import signal
import subprocess
import sys

from fractions  import Fraction
from rpn_lex    import tokens

rpn_version = 15.1
parse_error = False



#############################################################################
#
#       S U P P O R T   C L A S S E S
#
#############################################################################
class Rpn2Exception(Exception):
    def __init__(self, msg=""):
        self._message = msg
    def __str__(self):
        return str(self._message)

class Rpn2Abort(Rpn2Exception):
    """Rpn2Abort is raised by the ABORT and ABORT" words.
It is caught in p_execute().  It clears the parameter and string stacks,"""
    pass

class Rpn2Exit (Rpn2Exception):
    """Rpn2Exit is raised when there is no more input to parse, or
the interrupt key is signaled.  It is caught in __main__, where processing
is haltted, the exit routine prints the stack, and the program exits."""
    pass

class Rpn2Fatal(Rpn2Exception):
    """Rpn2Fatal is raised whenever an internal error is detected that
forces the program to abend.  It is caught in __main__ and causes an
immediate program termination."""
    pass

class Rpn2Leave(Rpn2Exception):
    """Rpn2Leave is raised by the LEAVE word.  This is caught by
BEGIN or DO loops, and causes an immediate exit from the enclosing loop.
If a loop is not currently executing, it is caught in p_execute() and
an error message is printed."""
    pass


class Rpn2BeginAgain:
    def __init__(self, seq):
        self._seq = seq

    def __call__(self):
        try:
            while True:
                self._seq.__call__()
        except Rpn2Leave:
            pass

    def __str__(self):
        return "begin {} again".format(self._seq)

    def __repr__(self):
        return "BeginAgain[{}]".format(repr(self._seq))


class Rpn2BeginUntil:
    def __init__(self, seq):
        self._seq = seq

    def __call__(self):
        try:
            while True:
                self._seq.__call__()
                if param_stack.empty():
                    raise RuntimeError("until: Insufficient parameters (1 required)")
                flag = param_stack.pop()
                if type(flag) is not Rpn2Integer:
                    param_stack.push(flag)
                    raise TypeError("until: Flag must be an integer")
                if flag.value() != 0:
                    break
        except Rpn2Leave:
            pass

    def __str__(self):
        return "begin {} until".format(self._seq)

    def __repr__(self):
        return "BeginUntil[{}]".format(repr(self._seq))


class Rpn2BeginWhile:
    def __init__(self, seq1, seq2):
        self._seq1 = seq1
        self._seq2 = seq2

    def __call__(self):
        try:
            while True:
                self._seq1.__call__()
                if param_stack.empty():
                    raise RuntimeError("until: Insufficient parameters (1 required)")
                flag = param_stack.pop()
                if type(flag) is not Rpn2Integer:
                    param_stack.push(flag)
                    raise TypeError("until: Flag must be an integer")
                if flag.value() == 0:
                    break
                self._seq2.__call__()
        except Rpn2Leave:
            pass

    def __str__(self):
        return "begin {} while {} repeat".format(self._seq1, self._seq2)

    def __repr__(self):
        return "BeginWhile[{},{}]".format(repr(self._seq1), repr(self._seq2))


class Rpn2Complex:
    def __init__(self, real=0.0, imag=0.0):
        self.set_real_imag(real, imag)

    @classmethod
    def from_complex(cls, cplx):
        return cls(cplx.real, cplx.imag)

    def value(self):
        return self._value

    def real(self):
        return self.value().real

    def imag(self):
        return self.value().imag

    def set_real_imag(self, real, imag):
        self._value = complex(float(real), float(imag))

    def zerop(self):
        return self.real() == 0.0 and self.imag() == 0.0

    def __str__(self):
        return "({}, {})".format(self.real(), self.imag()) # sprintf?

    def __repr__(self):
        return "Complex[{}]".format(repr(self.value()))


class Rpn2DoLoop:
    def __init__(self, seq):
        self._seq = seq

    def __call__(self):
        if param_stack.size() < 2:
            raise RuntimeError("do: Insufficient parameters (2 required)")
        x = param_stack.pop()
        y = param_stack.pop()
        if type(y) is not Rpn2Integer or type(x) is not Rpn2Integer:
            param_stack.push(y)
            param_stack.push(x)
            raise TypeError("do: Loop control parameters must be integers")
        limit = y.value()
        i = initial = x.value()
        if initial == limit:
            #lnwriteln("do: Not executing because initial == limit")
            return

        # Create a new scope
        # Define variable (word?) I

        try:
            while True:
                self._seq.__call__()
                i += 1
                if i >= limit:
                    break
        except Rpn2Leave:
            pass

    def __str__(self):
        return "do {} loop".format(self._seq)

    def __repr__(self):
        return "DoLoop[{}]".format(repr(self._seq))


class Rpn2DoPlusLoop:
    def __init__(self, seq):
        self._seq = seq

    def __call__(self):
        if param_stack.size() < 2:
            raise RuntimeError("do: Insufficient parameters (2 required)")
        x = param_stack.pop()
        y = param_stack.pop()
        if type(y) is not Rpn2Integer or type(x) is not Rpn2Integer:
            param_stack.push(y)
            param_stack.push(x)
            raise TypeError("do: Loop control parameters must be integers")
        limit = y.value()
        i = initial = x.value()
        if initial == limit:
            #lnwriteln("do: Not executing because initial == limit")
            return

        # Create a new scope
        # Define variable (word?) I

        try:
            while True:
                self._seq.__call__()
                if param_stack.empty():
                    raise RuntimeError("+loop: Insufficient parameters (1 required)")
                incr = param_stack.pop()
                if type(incr) is not Rpn2Integer:
                    param_stack.push(incr)
                    raise TypeError("+loop: Increment must be integer")
                i += incr.value()
                if    incr.value() > 0 and i >= limit \
                   or incr.value() < 0 and i < limit:
                    break
        except Rpn2Leave:
            pass

    def __str__(self):
        return "do {} +loop".format(self._seq)

    def __repr__(self):
        return "DoPlusLoop[{}]".format(repr(self._seq))


class Rpn2DotQuote:
    def __init__(self, val):
        if len(val) < 3 or val[0:2] != '."' or val[-1] != '"':
            raise Rpn2Fatal("{}: Malformed string: '{}'".format(whoami(), val))
        self._str = val[2:-1]

    def stringval(self):
        return self._str

    def __call__(self):
        write("{}".format(self.stringval()))

    def __str__(self):
        return ".\"{}\"".format(self.stringval())

    def __repr__(self):
        return "DotQuote[{}]".format(repr(self.stringval()))


class Rpn2Error:
    def __init__(self, msg):
        self._message = msg

    def __call__(self):
        lnwriteln(self._message)

    def __repr__(self):
        return "Error[{}]".format(self._message)


class Rpn2Exe:
    def __init__(self, exe):
        self._exe = exe

    def __call__(self):
        self._exe.__call__()

    def __str__(self):
        return str(self._exe)

    def __repr__(self):
        return "Exe[{}]".format(repr(self._exe))


class Rpn2FetchVar:
    def __init__(self, id, var):
        if type(var) is not Rpn2Variable:
            raise Rpn2Fatal("{}: Variable {} is not an Rpn2Variable".format(whoami(), id))
        self._identifier = id
        self._variable = var

    def variable(self):
        return self._variable

    def identifier(self):
        return self._identifier

    def __str__(self):
        return "@{}".format(self.identifier())

    def __repr__(self):
        return "Fetch[{}]".format(self.identifier())


class Rpn2Float:
    def __init__(self, val=0.0):
        self._value = float(val)

    def value(self):
        return self._value

    def set_value(self, val):
        self._value = float(val)

    def zerop(self):
        return self.value() == 0.0

    def __str__(self):
        return "{}".format(self.value()) # sprintf

    def __repr__(self):
        return "Float[{}]".format(repr(self.value()))


class Rpn2Help:
    def __init__(self, id, doc):
        self._identifier = id
        self._doc = doc

    def __call__(self):
        lnwriteln(self.doc())

    def identifier(self):
        return self._identifier

    def doc(self):
        return self._doc

    def __str__(self):
        return "help {}".format(self.identifier())

    def __repr__(self):
        return "Help[{}]".format(self.repr(self.identifier()))


class Rpn2If:
    def __init__(self, seq):
        self._seq = seq

    def __call__(self):
        if param_stack.empty():
            raise RuntimeError("if: Insufficient parameters (1 required)")
        flag = param_stack.pop()
        if type(flag) is not Rpn2Integer:
            param_stack.push(flag)
            raise TypeError("if: Flag must be an integer")
        if flag.value() != 0:
            self._seq.__call__()

    def __str__(self):
        return "if {} then".format(self._seq)

    def __repr__(self):
        return "If[{}]".format(repr(self._seq))


class Rpn2IfElse:
    def __init__(self, seq1, seq2):
        self._seq1 = seq1
        self._seq2 = seq2

    def __call__(self):
        if param_stack.empty():
            raise RuntimeError("if: Insufficient parameters (1 required)")
        flag = param_stack.pop()
        if type(flag) is not Rpn2Integer:
            param_stack.push(flag)
            raise TypeError("if: Flag must be an integer")
        if flag.value() != 0:
            self._seq1.__call__()
        else:
            self._seq2.__call__()

    def __str__(self):
        return "if {} else {} then".format(self._seq1, self._seq2)

    def __repr__(self):
        return "IfElse[{},{}]".format(repr(self._seq1), repr(self._seq2))


class Rpn2Integer:
    def __init__(self, val=0):
        self._value = int(val)

    def value(self):
        return self._value

    def set_value(self, val):
        self._value = int(val)

    def zerop(self):
        return self.value() == 0

    def __str__(self):
        return "{}".format(self.value()) # sprintf

    def __repr__(self):
        return "Integer[{}]".format(repr(self.value()))


class Rpn2List:
    def __init__(self, item=None, oldlist=None):
        if item is None and oldlist is None:
            self._list = []
        elif item is not None and oldlist is None:
            self._list = [ item ]
        else:
            val = []
            for x in oldlist.listval():
                val.append(x)
            val.insert(0, item)
            self._list = val

    def listval(self):
        return self._list

    def __call__(self):
        for item in self.listval():
            # lnwriteln("{}: {}.__call__()".format(whoami(), item))
            item.__call__()

    def items(self):
        for item in self.listval():
            yield item

    def __len__(self):
        return len(self.listval())

    def __str__(self):
        s = ""
        for item in self.listval():
            s += str(item) + " "
        return s[:-1]

    def __repr__(self):
        if len(self.listval()) == 0:
            return "List[]"
        else:
            s = "List["
            for item in self.listval():
                s += repr(item) + ","
            return s[:-1] + "]"


class Rpn2Matrix:
    def __init__(self, vals):
        lnwriteln("{}: vals={}".format(whoami(), vals))
        self._vals = vals
        self._nrows = len(vals)
        cols = -1
        for x in vals.items():
            lnwriteln("x={}".format(repr(x)))
            if cols == -1:
                cols = x.size()
            else:
                if x.size() != cols:
                    lnwriteln("Number of columns is not consistent")
                    return      # # raise?
        self._ncols = cols
        lnwriteln("{} rows x {} columns".format(self.nrows(), self.ncols()))

    def value(self):
        raise RuntimeError("Need Rpn2Matrix#value()")

    def nrows(self):
        return self._nrows

    def ncols(self):
        return self._ncols

    def __str__(self):
        return "Matrix..."      # "[" + str(self.vals) + "]"

    def __repr__(self):
        return "Matrix[{}]".format(repr(self._vals))


class Rpn2NoOp:
    def __init__(self):
        pass

    def __call__(self):
        pass

    def __str__(self):
        return ""

    def __repr__(self):
        return "NoOp[]"


class Rpn2Rational:
    def __init__(self, num=0, denom=1):
        self._value = Fraction(int(num), int(denom))

    @classmethod
    def from_Fraction(cls, frac):
        return cls(frac.numerator, frac.denominator)

    def value(self):
        return self._value

    def numerator(self):
        return self.value().numerator

    def denominator(self):
        return self.value().denominator

    def set_num_denom(self, num, denom):
        self._value = Fraction(int(num), int(denom))

    def zerop(self):
        return self.numerator() == 0

    def __str__(self):
        return "{}~{}".format(self.numerator(), self.denominator())

    def __repr__(self):
        return "Rational[{}]".format(repr(self.value()))


class Rpn2Scope:
    def __init__(self):
        self._words = {}
        self._variables = {}

    def words(self):
        return self._words

    def set_word(self, identifier, word):
        if type(word) is not Rpn2Word:
            raise Rpn2Fatal("{}: Word {} is not an Rpn2Word".format(whoami(), identifier))
        self._words[identifier] = word

    def word(self, identifier):
        return self._words.get(identifier)

    def set_variable(self, identifier, var):
        if type(var) is not Rpn2Variable:
            raise Rpn2Fatal("{}: Variable {} is not an Rpn2Variable".format(whoami(), identifier))
        self._variables[identifier] = var

    def variable(self, identifier):
        return self._variables.get(identifier)

    def variables(self):
        return self._variables

    def __repr__(self):
        return "Scope[{}]".format(hex(id(self)))


class Rpn2Sequence:
    def __init__(self, scope, in_vars, out_vars, exe_seq):
        self._scope    = scope
        self._in_vars  = in_vars
        self._out_vars = out_vars
        self._exe_seq  = exe_seq
        # print("{}: scope={}, exe_seq={}".format(whoami(), repr(scope), repr(exe_seq)))

    def __call__(self):
        # check param_stack.size() vs len(in_vars)

        # lnwriteln("{}: Push scope {}".format(whoami(), self.scope()))
        scope_stack.push(self.scope())
        try:
            # lnwriteln("{}: exe_seq={}".format(whoami(), repr(self._exe_seq)))
            self._exe_seq.__call__()
        finally:
            s = scope_stack.pop()
            # lnwriteln("{}: Pop scope {}".format(whoami(), s))

        # push out variables onto param_stack

    def scope(self):
        return self._scope

    def exe_seq(self):
        return self._exe_seq

    def __str__(self):
        s = "Scope+Seq"

    def __repr__(self):
        return "Sequence[Scope={}, Exe_Seq={}]".format(repr(self.scope()), repr(self.exe_seq()))


class Rpn2Stack:
    def __init__(self):
        self._stack = []
        self._nitems = 0

    def clear(self):
        self._stack = []
        self._nitems = 0

    def size(self):
        return self._nitems

    def empty(self):
        return self.size() == 0

    def push(self, item):
        self._nitems += 1
        self._stack.append(item)

    def pop(self):
        if self.empty():
            raise Rpn2Fatal("{}: Empty stack".format(whoami()))
        self._nitems -= 1
        return self._stack.pop()

    def top(self):
        if self.empty():
            raise Rpn2Fatal("{}: Empty stack".format(whoami()))
        return self._stack[self.size() - 1]

    def items_bottom_to_top(self):
        """Return stack items from bottom to top."""
        i = self._nitems + 1
        for item in self._stack:
            i -= 1
            yield (i, item)

    def items_top_to_bottom(self):
        """Return stack items from top to bottom."""
        return reversed(list(self.items_bottom_to_top()))


class Rpn2Stackable:
    def __init__(self, val):
        self._value = val

    def value(self):
        return self._value

    def __call__(self):
        if type(self.value()) in [Rpn2Complex, Rpn2Float, Rpn2Integer,
                                  Rpn2Matrix, Rpn2Rational, Rpn2Vector]:
            param_stack.push(self.value())
        elif type(self.value()) is Rpn2String:
            string_stack.push(self.value())
        elif type(self.value()) is Rpn2FetchVar:
            var = self.value().variable()
            if type(var) is not Rpn2Variable:
                raise Rpn2Fatal("{}: Rpn2FetchVar.value().variable ({}) is not an Rpn2Variable".format(whoami(), self.value().identifier()))
            elif var.obj() is None:
                raise RuntimeError("{}: Fetch of undefined variable {}".format(whoami(), self.value()))
            else:
                param_stack.push(var.obj())
        else:
            raise TypeError("Rpn2Stackable#__call__: Unrecognized type: {}".format(type(self.value())))

    def __str__(self):
        return str(self.value())

    def __repr__(self):
        return "Stackable[{}]".format(repr(self.value()))


class Rpn2StoreVar:
    def __init__(self, id, var):
        if type(var) is not Rpn2Variable:
            raise Rpn2Fatal("!{}: Variable is not an Rpn2Variable".format(id))
        self._identifier = id
        self._variable = var

    def identifier(self):
        return self._identifier

    def __call__(self):
        if param_stack.empty():
            raise RuntimeError("!{}: Insufficient parameters (1 required)".format(self.identifier()))
        self._variable.set_obj(param_stack.pop())

    def __str__(self):
        return "!{}".format(self.identifier())

    def __repr__(self):
        return "Store[{}]".format(self.identifier())


class Rpn2String:
    def __init__(self, val):
        if len(val) < 2 or val[0] != '"' or val[-1] != '"':
            raise Rpn2Fatal("{}: Malformed string: '{}'".format(whoami(), val))
        self._value = val[1:-1]

    def value(self):
        return self._value

    def set_value(self, val):
        self._value == val

    def __str__(self):
        return "\"{}\"".format(str(self.value()))

    def __repr__(self):
        return "String[{}]".format(repr(self.value()))


class Rpn2Variable:
    def __init__(self, name, obj=None):
        self._name = name
        self._rpnobj = obj

    def obj(self):
        return self._rpnobj

    def set_obj(self, newobj):
        self._rpnobj = newobj

    def name(self):
        return self._name

    def __str__(self):
        return str(self._name)

    def __repr__(self):
        return "Variable[{}]".format(self._name)


class Rpn2Vector:
    def __init__(self, vals):
        self._vals = vals
        np_list = []
        for item in vals.items():
            np_list.append(item.value())
        self._np_value = np.array(np_list)

    def value(self):
        return self._np_value

    def size(self):
        return len(self._vals)

    def __str__(self):
        for x in self._np_value:
            lnwriteln(str(x))
            lnwriteln(repr(x))
        return "[{}]\nNP:{}".format(self._vals, self._np_value)

    def __repr__(self):
        return "Vector[{}]\nNP:{}".format(repr(self._vals),repr(self._np_value))


class Rpn2Word:
    def __init__(self, name, defn, **kwargs):
        self._args     = 0
        self._defn     = defn
        self._doc      = ""
        self._name     = name
        self._str_args = 0

        if defn is None:
            raise Rpn2Fatal("{}: defn is None".format(name))
        if kwargs.get("args"):
            self._args = kwargs['args']
            del kwargs["args"]
        if kwargs.get("doc"):
            self._doc = kwargs["doc"]
            del kwargs["doc"]
        if kwargs.get("str_args"):
            self._str_args = kwargs["str_args"]
            del kwargs["str_args"]
        if len(kwargs) > 0:
            for (key, val) in kwargs.items():
                lnwriteln("{}: Unrecognized keyword '{}' ({}) in defword".format(name, key, val))
            sys.exit(1)

    def __call__(self):
        if param_stack.size() < self.args():
            raise RuntimeError("{}: Insufficient parameters ({} required)".format(self.name(), self.args()))
        if string_stack.size() < self.str_args():
            raise RuntimeError("{}: Insufficient string parameters ({} required)".format(self.name(), self.str_args()))

        self._defn.__call__()

    def name(self):
        return self._name

    def args(self):
        return self._args

    def str_args(self):
        return self._str_args

    def doc(self):
        return self._doc

    def __str__(self):
        return str(self.name())

    def __repr__(self):
        return "Word[{}]".format(self.name())



#############################################################################
#
#       P A R S E   F U N C T I O N S
#
#############################################################################
start = 'interpret'

def p_interpret(p):
    '''interpret : cmd
                 | cmd interpret'''

    p[0] = Rpn2NoOp()


def p_cmd(p):
    '''cmd :  executable  execute'''

    # Don't need to return anything since `execute' does all the work
    p[0] = Rpn2NoOp()


def p_execute(p):
    '''execute : empty'''

    executable = p[-1]
    try:
        executable.__call__()
    except KeyboardInterrupt:
        # CTRL/C while executing returns to top level prompt
        pass
    except Rpn2Abort as e:
        if len(e._message) > 0:
            lnwriteln("{}".format(e))
        param_stack.clear()
        string_stack.clear()
    except Rpn2Leave:
        lnwriteln("leave: Cannot be used outside of a BEGIN or DO loop")
    except RuntimeError as e:
        lnwriteln("{}".format(e))
    except TypeError as e:
        lnwriteln("{}".format(e))
        w_dot_s()
    except ValueError as e:
        lnwriteln("{}".format(e))

    p[0] = Rpn2NoOp()


def p_sequence(p):
    '''sequence : locals_opt executables_opt'''

    # `locals_opt' is a Scope; `executables_opt' is a List
    p[0] = Rpn2Sequence(p[1], [], [], p[2])


def p_locals_opt(p):
    '''locals_opt :  empty
                  |  VBAR  ids_opt  VBAR'''

    scope = Rpn2Scope()

    # lnwriteln("{}: len={}".format(whoami(), len(p)))
    if len(p) == 4:
        for varname in p[2].items():
            var = Rpn2Variable(varname)
            #lnwriteln("{}: Defining variable {} in scope {}".format(whoami(), varname, scope_stack.top()))
            scope.set_variable(varname, var)

    # lnwriteln("{}: Push new scope {}".format(whoami(), scope))
    scope_stack.push(scope)
    p[0] = scope


def p_executables_opt(p):
    '''executables_opt :  empty
                       |  executable  executables_opt'''

    if len(p) == 2:
        p[0] = Rpn2List()
    elif len(p) == 3:
        p[0] = Rpn2List(p[1], p[2])
    # lnwriteln("{}: Returning {}".format(whoami(), p[0])))


def p_colon_def(p):
    '''colon_def :  COLON  IDENTIFIER  docstr_opt  sequence  SEMICOLON  define_word'''

    # This returns a NoOp because `define_word' does all the work
    p[0] = Rpn2NoOp()


def p_colon_def_error(p):
    '''colon_def :  COLON  IDENTIFIER  docstr_opt  error  SEMICOLON '''

    s = scope_stack.pop()
    #lnwriteln("{}: Pop scope {}".format(whoami(), s))
    p[0] = Rpn2Error("{}: Syntax error in definition".format(p[2]))


def p_define_word(p):
    '''define_word : empty'''

    sequence   = p[-2]
    doc_str    = p[-3]
    identifier = p[-4]
    # lnwriteln("{}: identifier={}  doc_str={}  sequence={}".format(whoami(), identifier, repr(doc_str), repr(sequence)))

    global parse_error
    if parse_error:
        lnwriteln("{}: Syntax error in definition".format(identifier))
        scope_stack.pop()
        p[0] = Rpn2NoOp()
        return

    kwargs = dict()
    if doc_str is not None:
        if len(doc_str) < 6 or doc_str[0:5] != 'doc:"' or doc_str[-1] != '"':
            raise Rpn2Fatal("{}: Malformed doc_str: '{}'".format(whoami(), doc_str))
        doc_str = doc_str[5:-1]
        kwargs['doc'] = doc_str

    # The local variables have been defined in the scope associated with
    # the new word.  Now pop the scope stack so that the word is defined
    # in the parent scope.  (This is often, but not necessarily, the
    # global scope.)
    s = scope_stack.pop()
    # lnwriteln("{}: Pop scope {}".format(whoami(), s))

    new_word = Rpn2Word(identifier, sequence, **kwargs)
    #lnwriteln("{}: Defining word {}={} into scope {}".format(whoami(), identifier, repr(new_word), scope_stack.top()))
    scope_stack.top().set_word(identifier, new_word)

    p[0] = new_word
    #lnwriteln("{}: Returning {}".format(whoami(), p[0]))


def p_begin_again(p):
    '''begin_again :  BEGIN  sequence  AGAIN'''

    p[0] = Rpn2BeginAgain(p[2])


def p_begin_until(p):
    '''begin_until :  BEGIN  sequence  UNTIL'''

    p[0] = Rpn2BeginUntil(p[2])


def p_begin_while(p):
    '''begin_while :  BEGIN  sequence  WHILE  sequence  REPEAT'''

    p[0] = Rpn2BeginWhile(p[2], p[4])


def p_docstr_opt(p):
    '''docstr_opt :  empty
                  |  DOC_STR'''

    p[0] = p[1]


# def p_case(p):
#     # Not implemented yet
# """
# n CASE
#   x OF ... ENDOF
#   y OF ... ENDOF
#   z OF ... ENDOF
#   OTHERWISE ...
# ENDCASE
# """


def p_complex(p):
    '''complex :  OPEN_PAREN  real  COMMA  real  CLOSE_PAREN '''
    p[0] = Rpn2Complex(p[2].value(), p[4].value())


def p_do_loop(p):
    '''do_loop :  DO  sequence  LOOP'''

    p[0] = Rpn2DoLoop(p[2])


def p_do_plusloop(p):
    '''do_plusloop :  DO  sequence  PLUS_LOOP'''

    p[0] = Rpn2DoPlusLoop(p[2])


def p_dot_quote(p):
    '''dot_quote :  DOT_QUOTE'''

    p[0] = Rpn2DotQuote(p[1])


def p_empty(p):
    '''empty :'''

    pass


def p_error(p):
    global parse_error
    if p is None:
        #lnwriteln("{}(None): End of file".format(whoami()))
        parser.restart()
    else:
        #lnwriteln("{}({})".format(whoami(), p))
        lnwriteln("{}: Not valid".format(p.value))
        parse_error = True
        parser.restart()

    # What to do?
    #parser.restart()
    #parser.errok()


def p_executable(p):
    '''executable :  begin_again
                  |  begin_until
                  |  begin_while
                  |  colon_def
                  |  do_loop
                  |  do_plusloop
                  |  dot_quote
                  |  help
                  |  if_then
                  |  if_else_then
                  |  stackable
                  |  store_var
                  |  word'''

    # A "word" is not just an identifier, a word is something that is
    # findable somewhere in the scope_stack.  It is a syntax error if
    # the identifier is not found.
    p[0] = Rpn2Exe(p[1])


def p_fetch_var(p):
    '''fetch_var :  AT_SIGN  IDENTIFIER'''

    global parse_error
    id = p[2]
    # lnwriteln("{}: Looking up {}".format(whoami(), id))
    var = lookup_variable(id)
    if var is None:
        lnwriteln("@{}: Variable not found".format(id))
        parse_error = True
        raise SyntaxError
    p[0] = Rpn2FetchVar(id, var)


def p_float(p):
    '''float :  FLOAT'''

    p[0] = Rpn2Float(p[1])


def p_help(p):
    '''help :  HELP  IDENTIFIER
            |  HELP  PLUS_LOOP
            |  HELP  DOT_QUOTE
            |  HELP  AGAIN
            |  HELP  BEGIN
            |  HELP  DO
            |  HELP  ELSE
            |  HELP  HELP
            |  HELP  IF
            |  HELP  LOOP
            |  HELP  REPEAT
            |  HELP  THEN
            |  HELP  UNTIL
            |  HELP  WHILE'''

    global parse_error
    name = p[2]
    word = lookup_word(name)
    if word is None:
        # throw a parse error
        lnwriteln("help: '{}' not found".format(name))
        parse_error = True
        raise SyntaxError
    else:
        p[0] = Rpn2Help(name, word.doc() if len(word.doc()) > 0 \
                        else "No help available for '{}'".format(name))


def p_ids_opt(p):
    '''ids_opt :  empty
              |  IDENTIFIER  ids_opt'''

    if len(p) == 2:
        p[0] = Rpn2List()
    elif len(p) == 3:
        p[0] = Rpn2List(p[1], p[2])


def p_if_then(p):
    '''if_then :  IF  sequence  THEN'''

    p[0] = Rpn2If(p[2])


def p_if_else_then(p):
    '''if_else_then :  IF  sequence  ELSE  sequence  THEN'''

    p[0] = Rpn2IfElse(p[2], p[4])


def p_integer(p):
    '''integer :  INTEGER'''

    p[0] = Rpn2Integer(p[1])


def p_matrix(p):
    '''matrix :  OPEN_BRACKET  vectors  CLOSE_BRACKET'''

    p[0] = Rpn2Matrix(p[2])


def p_number(p):
    '''number :  real
              |  rational
              |  complex'''

    p[0] = p[1]


def p_numbers(p):
    '''numbers :  number
               |  number  numbers'''

    if len(p) == 2:
        p[0] = Rpn2List(p[1])
    elif len(p) == 3:
        p[0] = Rpn2List(p[1], p[2])


def p_rational(p):
    '''rational :  integer  TILDE  integer'''

    p[0] = Rpn2Rational(p[1].value(), p[3].value())


def p_real(p):
    '''real :  integer
            |  float'''

    p[0] = p[1]


def p_stackable(p):
    '''stackable :  number
                 |  string
                 |  vector
                 |  matrix
                 |  fetch_var'''

    p[0] = Rpn2Stackable(p[1])


def p_store_var(p):
    '''store_var :  EXCLAM  IDENTIFIER'''

    global parse_error
    id = p[2]
    #lnwriteln("{}: Looking up {}".format(whoami(), id))
    var = lookup_variable(id)
    if var is None:
        lnwriteln("!{}: Variable not found".format(id))
        parse_error = True
        raise SyntaxError
    p[0] = Rpn2StoreVar(id, var)


def p_string(p):
    '''string :  STRING'''

    p[0] = Rpn2String(p[1])


def p_vector(p):
    '''vector :  OPEN_BRACKET  numbers  CLOSE_BRACKET'''

    p[0] = Rpn2Vector(p[2])


def p_vectors(p):
    '''vectors :  vector
               |  vector  vectors'''

    lnwriteln("{}: len={}".format(whoami(), len(p)))
    if len(p) == 2:
        p[0] = Rpn2List(p[1])
    elif len(p) == 3:
        p[0] = Rpn2List(p[1], p[2])


def p_word(p):
    '''word :  IDENTIFIER'''

    global parse_error
    name = p[1]
    word = lookup_word(name)
    if word is None:
        # throw a parse error
        #lnwriteln("{}: Word '{}' not found".format(whoami(), name))
        lnwriteln("{}: Word not found".format(name))
        parse_error = True
        raise SyntaxError
    else:
        p[0] = word




#############################################################################
#
#       W O R D   D E F I N I T I O N S
#
#############################################################################
def w_abort():
    raise Rpn2Abort()


def w_chs():
    x = param_stack.pop()
    if type(x) is Rpn2Integer:
        result = Rpn2Integer(-1 * x.value())
    elif type(x) is Rpn2Float:
        result = Rpn2Float(-1.0 * x.value())
    elif type(x) is Rpn2Rational:
        result = Rpn2Rational.from_Fraction(Fraction(-1,1) * x.value())
    elif type(x) is Rpn2Complex:
        result = Rpn2Complex(-1.0*x.real(), -1.0*x.imag())
    else:
        param_stack.push(x)
        raise TypeError("chs: Type error ({})".format(type(x)))
    param_stack.push(result)


def w_clear():
    param_stack.clear()


def w_comb():
    x = param_stack.pop()
    y = param_stack.pop()
    if type(x) is Rpn2Integer and type(y) is Rpn2Integer:
        result = Rpn2Integer(choose_helper(y.value(), x.value()))
    else:
        param_stack.push(y)
        param_stack.push(x)
        raise TypeError("comb: Type mismatch ({}, {})".format(type(y), type(x)))
    param_stack.push(result)


def w_cr():
    writeln()


def w_debug():
    global rpn_debug
    if rpn_debug:
        rpn_debug = False
    else:
        rpn_debug = True
    lnwriteln("debug: Debugging is now {}".format(rpn_debug))


def w_deg():
    global angle_mode
    angle_mode = "d"


def w_depth():
    param_stack.push(Rpn2Integer(param_stack.size()))


def w_dollar_dot():
    write(string_stack.pop().value())


def w_dollar_dot_bang():
    lnwriteln(repr(string_stack.top()))


def w_dollar_dot_s():
    for (i, item) in string_stack.items_bottom_to_top():
        lnwriteln("{}: {}".format(i, item.value()))


def w_dollar_dot_s_bang():
    for (i, item) in string_stack.items_bottom_to_top():
        lnwriteln("{}: {}".format(i, repr(item)))


def w_dot():
    write("{} ".format(str(param_stack.pop())))


def w_dot_bang():
    lnwriteln(repr(param_stack.top()))


def w_drop():
    param_stack.pop()


def w_dot_s():
    for (i, item) in param_stack.items_bottom_to_top():
        lnwriteln("{}: {}".format(i, item))


def w_dot_s_bang():
    for (i, item) in param_stack.items_bottom_to_top():
        lnwriteln("{}: {}".format(i, repr(item)))


def w_dup():
    x = param_stack.pop()
    param_stack.push(x)
    param_stack.push(x)


def w_emit():
    x = param_stack.pop()
    if type(x) is not Rpn2Integer:
        param_stack.push(x)
        raise TypeError("emit: Type error ({})".format(type(x)))
    write(chr(x.value()))


def w_equal():
    """\
|----------+----------+---------+----------+---------+--------+--------|
| Integer  |   xxxx   |  xxx    |  xxxx    | xxxx    |        |        |
| Float    |   xxxxx  |  xxx    |   xxxx   | xxx     |        |        |
| Rational |   xxxx   |  xxx    |  xxxxx   | xxxx    |        |        |
| Complex  |    xxxx  |  xxx    |   xxx    | xxx     |        |        |
| Vector   |          |         |          |         |        |        |
| Matrix   |          |         |          |         |        |        |
|----------+----------+---------+----------+---------+--------+--------|
| ^ Y  X > | Integer  | Float   | Rational | Complex | Vector | Matrix |"""

    x = param_stack.pop()
    y = param_stack.pop()
    if type(x) is Rpn2Integer and type(y) is Rpn2Integer:
        flag = y.value() == x.value()
    elif    type(x) is Rpn2Float and type(y) in [Rpn2Integer, Rpn2Float, Rpn2Rational] \
         or type(y) is Rpn2Float and type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational]:
        flag = float(y.value()) == float(x.value()) # Beware floating point equality lossage
    elif    type(x) is Rpn2Rational and type(y) in [Rpn2Integer, Rpn2Rational] \
         or type(y) is Rpn2Rational and type(x) in [Rpn2Integer, Rpn2Rational]:
        flag = Fraction(y.value()) == Fraction(x.value())
    elif    type(x) is Rpn2Complex and type(y) in [Rpn2Integer, Rpn2Float, Rpn2Rational, Rpn2Complex] \
         or type(y) is Rpn2Complex and type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational, Rpn2Complex]:
        flag = complex(y.value()) == complex(x.value())
    else:
        param_stack.push(y)
        param_stack.push(x)
        raise TypeError("=: Type error ({}, {})".format(type(y), type(x)))
    param_stack.push(Rpn2Integer(1 if flag else 0))


def w_eval():
    s = string_stack.pop().value()
    eval_string(s)


def w_exp():
    x = param_stack.pop()
    if    type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational]:
        result = Rpn2Float(math.exp(float(x.value())))
    elif    type(x) is Rpn2Complex:
        result = Rpn2Complex.from_complex(cmath.exp(complex(x.value())))
    else:
        param_stack.push(x)
        raise TypeError("exp: Type error ({})".format(type(x)))
    param_stack.push(result)


def w_leave():
    raise Rpn2Leave


def w_ln():
    x = param_stack.pop()
    if     type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational, Rpn2Complex] \
       and x.zerop():
        raise ValueError("ln: Cannot take logarithm of zero")

    if    type(x) is Rpn2Integer  and x.value() > 0 \
       or type(x) is Rpn2Float    and x.value() > 0.0 \
       or type(x) is Rpn2Rational and x.value() > 0:
        result = Rpn2Float(math.log(float(x.value())))
    elif    type(x) is Rpn2Complex \
         or type(x) is Rpn2Integer  and x.value() < 0 \
         or type(x) is Rpn2Float    and x.value() < 0.0 \
         or type(x) is Rpn2Rational and x.value() < 0:
        result = Rpn2Complex.from_complex(cmath.log(complex(x.value())))
    else:
        param_stack.push(x)
        raise TypeError("ln: Type error ({})".format(type(x)))
    param_stack.push(result)


def w_load():
    filename = string_stack.pop().value()
    if not os.path.isfile(filename):
        lnwriteln("load: \"{}\" is not a valid file".format(filename))
    else:
        load_file(filename)


def w_minus():
    x = param_stack.pop()
    y = param_stack.pop()
    if type(x) is Rpn2Integer and type(y) is Rpn2Integer:
        result = Rpn2Integer(y.value() - x.value())
    elif    type(x) is Rpn2Float and type(y) in [Rpn2Integer, Rpn2Float, Rpn2Rational] \
         or type(y) is Rpn2Float and type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational]:
        result = Rpn2Float(float(y.value()) - float(x.value()))
    elif    type(x) is Rpn2Rational and type(y) in [Rpn2Integer, Rpn2Rational] \
         or type(y) is Rpn2Rational and type(x) in [Rpn2Integer, Rpn2Rational]:
        result = Rpn2Rational.from_Fraction(y.value() - x.value())
    elif    type(x) is Rpn2Complex and type(y) in [Rpn2Integer, Rpn2Float, Rpn2Rational, Rpn2Complex] \
         or type(y) is Rpn2Complex and type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational, Rpn2Complex]:
        result = Rpn2Complex.from_complex(complex(y.value()) - complex(x.value()))
    else:
        param_stack.push(y)
        param_stack.push(x)
        raise TypeError("-: Type error ({}, {})".format(type(y), type(x)))
    param_stack.push(result)


def w_minus_rot():
    x = param_stack.pop()
    y = param_stack.pop()
    z = param_stack.pop()
    param_stack.push(x)
    param_stack.push(z)
    param_stack.push(y)


def w_nip():
    x = param_stack.pop()
    y = param_stack.pop()
    param_stack.push(x)


def w_over():
    x = param_stack.pop()
    y = param_stack.pop()
    param_stack.push(y)
    param_stack.push(x)
    param_stack.push(y)


def w_perm():
    x = param_stack.pop()
    y = param_stack.pop()
    if type(y) is Rpn2Integer and type(x) is Rpn2Integer:
        n = y.value()
        r = x.value()
        if r > n or r < 0:
            result = Rpn2Integer(0)
        else:
            t = 1
            while r > 0:
                r -= 1
                t *= n
                n -= 1
            result = Rpn2Integer(t)
    else:
        param_stack.push(y)
        param_stack.push(x)
        raise TypeError("perm: Type error ({}, {})".format(type(y), type(x)))
    param_stack.push(result)


def w_plus():
    """\
|----------+----------+---------+----------+---------+--------+--------|
| Integer  | Integer  | Float   | Rational | Complex |        |        |
| Float    | Float    | Float   | Float    | Complex |        |        |
| Rational | Rational | Float   | Rational | Complex |        |        |
| Complex  | Complex  | Complex | Complex  | Complex |        |        |
| Vector   |          |         |          |         |        |        |
| Matrix   |          |         |          |         |        |        |
|----------+----------+---------+----------+---------+--------+--------|
| ^ Y  X > | Integer  | Float   | Rational | Complex | Vector | Matrix |"""

    x = param_stack.pop()
    y = param_stack.pop()
    if type(x) is Rpn2Integer and type(y) is Rpn2Integer:
        result = Rpn2Integer(y.value() + x.value())
    elif    type(x) is Rpn2Float and type(y) in [Rpn2Integer, Rpn2Float, Rpn2Rational] \
         or type(y) is Rpn2Float and type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational]:
        result = Rpn2Float(float(y.value()) + float(x.value()))
    elif    type(x) is Rpn2Rational and type(y) in [Rpn2Integer, Rpn2Rational] \
         or type(y) is Rpn2Rational and type(x) in [Rpn2Integer, Rpn2Rational]:
        result = Rpn2Rational.from_Fraction(y.value() + x.value())
    elif    type(x) is Rpn2Complex and type(y) in [Rpn2Integer, Rpn2Float, Rpn2Rational, Rpn2Complex] \
         or type(y) is Rpn2Complex and type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational, Rpn2Complex]:
        result = Rpn2Complex.from_complex(complex(y.value()) + complex(x.value()))
    else:
        param_stack.push(y)
        param_stack.push(x)
        raise TypeError("+: Type error ({}, {})".format(type(y), type(x)))
    param_stack.push(result)


def w_query_dup():
    x = param_stack.top()
    if type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational, Rpn2Complex]:
        if not x.zerop():
            w_dup()
    else:
        raise TypeError("?dup: Type error ({})".format(type(x)))


def w_rad():
    global angle_mode
    angle_mode = "r"


def w_rot():
    x = param_stack.pop()
    y = param_stack.pop()
    z = param_stack.pop()
    param_stack.push(y)
    param_stack.push(x)
    param_stack.push(z)


def w_scopes():
    for (i, item) in scope_stack.items_bottom_to_top():
        lnwriteln("{}: {}".format(i, item))


def w_show():
    s = string_stack.pop()
    what = lookup_word(s.value())
    if what is None:
        lnwriteln("Could not find word '{}'".format(s))
    else:
        lnwriteln("show: {}".format(what))
        lnwriteln("show: {}".format(repr(what)))

def w_sqrt():
    x = param_stack.pop()
    if x.zerop():
        if type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational]:
            result = Rpn2Float(0.0)
        elif type(x) is Rpn2Complex:
            result = Rpn2Complex()
    elif    type(x) is Rpn2Integer  and x.value() > 0 \
         or type(x) is Rpn2Float    and x.value() > 0.0 \
         or type(x) is Rpn2Rational and x.value() > 0:
        result = Rpn2Float(math.sqrt(float(x.value())))
    elif    type(x) is Rpn2Complex \
         or type(x) is Rpn2Integer  and x.value() < 0 \
         or type(x) is Rpn2Float    and x.value() < 0.0 \
         or type(x) is Rpn2Rational and x.value() < 0:
        result = Rpn2Complex.from_complex(cmath.sqrt(complex(x.value())))
    else:
        param_stack.push(x)
        raise TypeError("sqrt: Type error ({})".format(type(x)))
    param_stack.push(result)


def w_swap():
    x = param_stack.pop()
    y = param_stack.pop()
    param_stack.push(x)
    param_stack.push(y)


def w_times():
    """\
|----------+----------+---------+----------+---------+--------+--------|
| Integer  | Integer  | Float   | Rational | Complex |        |        |
| Float    | Float    | Float   | Float    | Complex |        |        |
| Rational | Rational | Float   | Rational | Complex |        |        |
| Complex  | Complex  | Complex | Complex  | Complex |        |        |
| Vector   |          |         |          |         |        |        |
| Matrix   |          |         |          |         |        |        |
|----------+----------+---------+----------+---------+--------+--------|
| ^ Y  X > | Integer  | Float   | Rational | Complex | Vector | Matrix |"""

    x = param_stack.pop()
    y = param_stack.pop()
    if type(x) is Rpn2Integer and type(y) is Rpn2Integer:
        result = Rpn2Integer(y.value() * x.value())
    elif    type(x) is Rpn2Float and type(y) in [Rpn2Integer, Rpn2Float, Rpn2Rational] \
         or type(y) is Rpn2Float and type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational]:
        result = Rpn2Float(float(y.value()) * float(x.value()))
    elif    type(x) is Rpn2Rational and type(y) in [Rpn2Integer, Rpn2Rational] \
         or type(y) is Rpn2Rational and type(x) in [Rpn2Integer, Rpn2Rational]:
        result = Rpn2Rational.from_Fraction(y.value() * x.value())
    elif    type(x) is Rpn2Complex and type(y) in [Rpn2Integer, Rpn2Float, Rpn2Rational, Rpn2Complex] \
         or type(y) is Rpn2Complex and type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational, Rpn2Complex]:
        result = Rpn2Complex.from_complex(complex(y.value()) * complex(x.value()))
    else:
        param_stack.push(y)
        param_stack.push(x)
        raise TypeError("+: Type error ({}, {})".format(type(y), type(x)))
    param_stack.push(result)


def w_tuck():
    x = param_stack.pop()
    y = param_stack.pop()
    param_stack.push(x)
    param_stack.push(y)
    param_stack.push(x)


def w_vars():
    scope = scope_stack.top()
    lnwriteln("{} vars: {}".format(scope, scope.variables().keys()))


def w_vars_bang():
    for (i, scope) in scope_stack.items_bottom_to_top():
        lnwriteln("{} vars: {}".format(scope, scope.variables().keys()))


def w_ver():
    lnwriteln("RPN version {}".format(global_scope.variable('VER').obj().value()))


def w_words():
    scope = scope_stack.top()
    lnwriteln("{} words: {}".format(scope, scope.words().keys()))


def w_words_bang():
    for (i, scope) in scope_stack.items_bottom_to_top():
        lnwriteln("{} words: {}".format(scope, scope.words().keys()))


def w_zero_equals():
    x = param_stack.pop()
    if type(x) in [Rpn2Integer, Rpn2Float, Rpn2Rational, Rpn2Complex]:
        param_stack.push(Rpn2Integer(1 if x.zerop() else 0))
    else:
        param_stack.push(x)
        raise RuntimeError("0=: Type error ({})".format(type(x)))




#############################################################################
#
#       U T I L I T Y   F U N C T I O N S
#
#############################################################################
def choose_helper(n, r):
    if r > n or r < 0:
        return 0
    if n - r < r:
        r = n - r

    result = 1
    j = 1
    while j <= r:
        result *= n; n -= 1
        result /= j; j += 1
    return result


def defvar(name, value, **kwargs):
    if len(kwargs) > 0:
        for (key, val) in kwargs.items():
            lnwriteln("{}: Unrecognized keyword '{}' ({}) in defvar".format(name, key, val))
        sys.exit(1)
    global_scope.set_variable(name, Rpn2Variable(name, value))


def defword(name, defn, **kwargs):
    global_scope.set_word(name, Rpn2Word(name, defn, **kwargs))


def eval_string(s):
    local_parser = yacc.yacc()
    result = local_parser.parse(s)
    #result.__call__()


def load_file(filename):
    with open(filename, "r") as file:
        contents = file.read()
    eval_string(contents)


def lookup_variable(name):
    for (_, scope) in scope_stack.items_top_to_bottom():
        #lnwriteln("{}: Looking for variable {} in {}...".format(whoami(), name, scope))
        #lnwriteln("{} has variables: {}".format(scope, scope.variables))
        var = scope.variable(name)
        if var is not None:
            # lnwriteln("{}: Found variable {} in scope {}: {}".format(whoami(), name, scope, var))
            return var
    #lnwriteln("{}: Variable {} not found".format(whoami(), name))
    return None


def lookup_word(name):
    for (_, scope) in scope_stack.items_top_to_bottom():
        #lnwriteln("{}: Looking for word {} in {}...".format(whoami(), name, scope))
        #lnwriteln("{} has words: {}".format(scope, scope.words))
        word = scope.word(name)
        if word is not None:
            #lnwriteln("{}: Found word {} in scope {}: {}".format(whoami(), name, scope, word))
            return word
    #lnwriteln("{}: Word {} not found".format(whoami(), name))
    return None


def prompt_string():
    global angle_mode
    return "[{}{}] ".format(angle_mode, param_stack.size())


# Simple SIGWINCH handler can become overwhelmed and crash if window
# changes come too fast.  Consider using shutil.get_terminal_size()
def sigwinch_handler(signum, frame):
    stty_size = subprocess.check_output(['stty', 'size']).decode().split()
    if len(stty_size) != 2:
        return

    tty_rows, tty_columns = stty_size
    #lnwriteln("{} x {}".format(tty_rows, tty_columns))
    if int(tty_columns) == 0:
        env_cols = os.getenv("COLUMNS")
        tty_columns = int(env_cols) if env_cols is not None else 80
    if int(tty_rows) == 0:
        env_rows = os.getenv("ROWS")
        tty_rows = int(env_rows) if env_rows is not None else 24
    global_scope.variable('ROWS').set_obj(Rpn2Integer(tty_rows))
    global_scope.variable('COLS').set_obj(Rpn2Integer(tty_columns))


def whoami():
    whoami = ""
    previous_frame = inspect.currentframe().f_back
    if "self" in previous_frame.f_locals:
        whoami += previous_frame.f_locals["self"].__class__.__name__ + "#"
    whoami += previous_frame.f_code.co_name
    return whoami


def write(s):
    sharpout = global_scope.variable('#OUT')
    outval = sharpout.obj().value()
    newline = s.find("\n")
    while newline != -1:
        substring = s[:newline]
        print(substring)
        outval = 0
        s = s[newline+1:]
        newline = s.find("\n")
    outval += len(s)
    print(s, end='')
    sharpout.set_obj(Rpn2Integer(outval))

def writeln(s=""):
    sharpout = global_scope.variable('#OUT')
    print(s)
    sharpout.set_obj(Rpn2Integer(0))

def lnwriteln(s):
    sharpout = global_scope.variable('#OUT')
    if sharpout.obj().value() != 0:
        writeln()
    writeln(s)




#############################################################################
#
#       P R I M A R Y   W O R D S   &   F U N C T I O N S
#
#############################################################################
def initialize():
    global rpn_version

    defvar('COLS',  Rpn2Integer(0))
    defvar('#OUT',  Rpn2Integer(0))
    defvar('ROWS',  Rpn2Integer(0))
    defvar('trace', Rpn2Integer(0))
    defvar('VER',   Rpn2Float(rpn_version))

    defword('$.',     w_dollar_dot, str_args=1, doc="""\
Print top item from string stack  [ str -- ]
No extraneous white space is printed.""")
    defword('$.!',    w_dollar_dot_bang, str_args=1)
    defword('$.s',    w_dollar_dot_s, doc="""\
Display string stack.""")
    defword('$.s!',   w_dollar_dot_s_bang)
    defword('*',      w_times, args=2, doc="""\
Multiplication  ( y x -- y*x )""")
    defword('+',      w_plus, args=2, doc="""\
Addition  ( y x -- y+x )""")
    defword('-',      w_minus, args=2, doc="""\
Subtraction  ( y x -- y-x )""")
    defword('-rot',   w_minus_rot, args=3, doc="""\
Push top stack element to third spot, pulling others down  ( z y x -- x z y )
Equivalent to ROT ROT""")
    defword('.',      w_dot, args=1)
    defword('.!',     w_dot_bang, args=1)
    defword('.s',     w_dot_s)
    defword('.s!',    w_dot_s_bang)
    defword('0=',     w_zero_equals, args=1)
    defword(':',      Rpn2NoOp(), doc="""\
Define a new word.
: WORD  [def ...] ;

Define WORD with the specified definition.  Terminate the definition with a
semi-colon.""")
    defword('=',      w_equal, args=2)
    defword('?dup',   w_query_dup, args=1, doc="""\
Duplicate top stack element if non-zero  ( x -- x x | 0 )""")
    defword('abort',  w_abort, doc="""\
Abort execution and return to top level""")
    defword('begin',  Rpn2NoOp(), doc="""\
Execute an indefinite loop as long as a condition is satisfied.
BEGIN xxx AGAIN
BEGIN xxx <flag> UNTIL
BEGIN xxx <flag> WHILE yyy REPEAT

LEAVE will exit the loop early.  Note that the effect of the test in
BEGIN...WHILE is opposite that in BEGIN...UNTIL.  The loop repeats
while something is true, rather than until it becomes true.

Do not confuse this with the BEG command, which sets "begin mode" for
TVM calculations.

qv AGAIN, LEAVE, REPEAT, UNTIL, WHILE""")
    defword('chs',    w_chs, args=1)
    defword('clear',  w_clear, doc="""\
Clear the stack""")
    defword('comb',   w_comb, args=2, doc="""\
Combinations  ( n r -- nCr )

DEFINITION:
          n!
nCr = -----------
      r! * (n-r)!""")
    defword('cr',     w_cr)
    defword('debug',  w_debug)
    defword('deg',    w_deg, doc="""\
Set angular mode to degrees""")
    defword('depth',  w_depth, doc="""\
Return current number of elements on stack  ( -- n )""")
    defword('do',     Rpn2NoOp(), doc="""\
Execute a definite loop.
<limit> <initial> DO xxx     LOOP
<limit> <initial> DO xxx <n> +LOOP

The iteration counter is available via I.  LEAVE will exit the loop early.

Example: 10 0 do I . loop
prints 0 1 2 3 4 5 6 7 8 9

qv I, LEAVE, LOOP, +LOOP""")
    defword('drop',   w_drop, args=1, doc="""\
Remove top stack element  ( x -- )""")
    defword('dup',    w_dup, args=1, doc="""\
Duplicate top stack element  ( x -- x x )
Equivalent to 0 PICK""")
    defword('emit',   w_emit, args=1)
    defword('eval',   w_eval, str_args=1)
    defword('exp',    w_exp, args=1)
    defword('if',     Rpn2NoOp(), args=1, doc="""\
Execute a conditional test.  xxx is executed if <flag> is non-zero.
<flag> IF xxx [ ELSE yyy ] THEN

qv ELSE, THEN""")
    defword('leave',  w_leave)
    defword('load',   w_load, str_args=1, doc="""\
Load file specified on string stack  [ file -- ]""")
    defword('ln',     w_ln, args=1, doc="""\
Natural logarithm [base e]  ( x -- ln )
Use "log" for the common (base 10) logarithm.""")
    defword('nip',    w_nip, args=2, doc="""\
Drop second stack element  ( y x -- x )
Equivalent to SWAP DROP.  J.V. Noble calls this PLUCK.""")
    defword('over',   w_over, args=2, doc="""\
Duplicate second stack element  ( y x -- y x y )
Equivalent to 1 PICK""")
    defword('perm',   w_perm, args=2, doc="""\
Permutations  ( n r -- nPr )

DEFINITION:
        n!
nPr = ------
      (n-r)!""")
    defword('rad',    w_rad)
    defword('rot',    w_rot, args=3, doc="""\
Pull third stack element to the top, rolling others up  ( z y x -- y x z )
Equivalent to 2 ROLL""")
    defword('scopes', w_scopes)
    defword('show',   w_show, str_args=1)
    defword('sqrt',   w_sqrt, args=1, doc="""
Square root  ( x -- sqrt(x) )
Negative X returns a complex number""")
    defword('swap',   w_swap, args=2, doc="""\
Exchange top two stack elements  ( y x -- x y )
Equivalent to 1 ROLL""")
    defword('tuck',   w_tuck, args=2, doc="""\
Duplicate top stack element into third position  ( y x -- x y x )
Equivalent to SWAP OVER.  J.V. Noble calls this UNDER.""")
    defword('vars',   w_vars, doc="""\
List variables and their values""")
    defword('vars!',  w_vars_bang)
    defword('ver',    w_ver, doc="""\
Display the current RPN version.
Also available as @VER""")
    defword('words',  w_words)
    defword('words!', w_words_bang)

    # Read & define ROWS and COLS via stty(1)
    sigwinch_handler(0, 0)

    init_file = os.path.expanduser("~/.rpn2rc")
    if os.path.isfile(init_file):
        load_file(init_file)


def define_secondary_words():
    eval_string("""

: BL  doc:"BL  ( -- 32 )   ASCII code for a space character"
      32 ;
: space  doc:"space   Display one space character"
         BL emit ;
: spaces  doc:"spaces  ( n -- )   Display N space characters"
          0 do space loop ;

""")


def main_loop():
    global rpn_debug
    global parse_error

    while True:
        if global_scope.variable('#OUT').obj().value() != 0:
            writeln()
        write(prompt_string())
        try:
            s = input() + " "
        except EOFError:
            raise Rpn2Exit()
        except KeyboardInterrupt:
            # CTRL/C on input exits program
            raise Rpn2Exit()
        global_scope.variable('#OUT').set_obj(Rpn2Integer(0))

        if not s or s == " ":
            continue

        parse_error = False
        result = parser.parse(s, debug=rpn_debug)
        #print("A:parse({}) => result={} (parse_error={})".format(s, repr(result), parse_error))
        while result is None and not parse_error:
            #print("In ..., parser.token() returns {}".format(parser.token()))
            write("... ")
            try:
                t = input() + " "
            except EOFError:
                raise Rpn2Exit()
            except KeyboardInterrupt:
                raise Rpn2Exit()
            global_scope.variable('#OUT').set_obj(Rpn2Integer(0))
            s += t
            result = parser.parse(s, debug=rpn_debug)
            #print("B:parse({}) => result={} (parse_error={}".format(s, repr(result), parse_error))
        if global_scope.variable('trace').obj().value() >= 2:
            lnwriteln("trace={}".format(repr(result)))
        elif global_scope.variable('trace').obj().value() >= 1:
            lnwriteln("trace={}".format(str(result)))


def do_exit():
    if global_scope.variable('#OUT').obj().value() != 0:
        writeln()
    if not param_stack.empty():
        if param_stack.size() == 1:
            w_dot(); print()
        else:
            w_dot_s()
    sys.exit(0)



#############################################################################
#
#       M A I N
#
#############################################################################
rpn_debug = False
angle_mode  = "r"               # r=radians, d=degrees, g=grads

parser = yacc.yacc()

param_stack  = Rpn2Stack()
return_stack = Rpn2Stack()
scope_stack  = Rpn2Stack()
string_stack = Rpn2Stack()

global_scope = Rpn2Scope()
#print("main: Push global scope {}".format(global_scope))
scope_stack.push(global_scope)

if __name__ == "__main__":
    signal.signal(signal.SIGWINCH, sigwinch_handler)
    initialize()
    define_secondary_words()
    w_ver()
    try:
        main_loop()
    except Rpn2Exit:
        pass
    except Rpn2Fatal as e:
        if len(e._message) > 0:
            lnwriteln("{}".format(e))
        sys.exit(1)
    do_exit()
